name: Build & Deploy
on:
  push:
    branches:
      - main
    paths: 
      - 'urlaub_ihk/*.tf'           # nur Terraform-Dateien triggern den Terraform-Job
      - 'urlaub_ihk/schema.sql'     # optional: Schema auch überwachen
      - '.github/workflows/main.yml' # Workflow-Änderungen triggern ebenfalls

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      db_host: ${{ steps.export.outputs.db_host }}
      db_user: ${{ steps.export.outputs.db_user }}
      db_name: ${{ steps.export.outputs.db_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init
        working-directory: ./urlaub_ihk

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./urlaub_ihk

      - id: export
        run: |
          echo "db_host=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "db_user=$(terraform output -raw db_user)" >> $GITHUB_OUTPUT
          echo "db_name=$(terraform output -raw db_name)" >> $GITHUB_OUTPUT
        working-directory: ./urlaub_ihk

  build:
    runs-on: ubuntu-latest
    needs: terraform
    outputs:
      db_host: ${{ needs.terraform.outputs.db_host }}
      db_user: ${{ needs.terraform.outputs.db_user }}
      db_name: ${{ needs.terraform.outputs.db_name }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22.20.0
        uses: actions/setup-node@v3
        with:
          node-version: '22.20.0'

      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install Dependencies
        run: npm install
        working-directory: ./urlaub_ihk

      - name: Build Angular App
        run: npm run build -- --configuration production --output-path=dist/browser
        working-directory: ./urlaub_ihk

      - name: Prepare Deployment Package
        run: |
          rm -rf dist-to-deploy
          mkdir -p dist-to-deploy/dist/browser
          cp -r dist/browser/* dist-to-deploy/dist/browser
          cp urlaub_ihk/server.js urlaub_ihk/package*.json urlaub_ihk/schema.sql dist-to-deploy/
          cd dist-to-deploy && zip -r ../app.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-package
          path: app.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-package
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: eu-central-1

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          application_name: "rocci-aws-app"
          environment_name: "rocci-aws-env"
          region: eu-central-1
          version_label: ${{ github.sha }}
          deployment_package: "app.zip"
